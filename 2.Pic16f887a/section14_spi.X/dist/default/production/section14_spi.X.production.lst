

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Jan 04 21:02:19 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 22/03/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0000                     	;# 
    50     0001                     	;# 
    51     0002                     	;# 
    52     0003                     	;# 
    53     0004                     	;# 
    54     0005                     	;# 
    55     0006                     	;# 
    56     0007                     	;# 
    57     0008                     	;# 
    58     0009                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     0088                     	;# 
    89     0089                     	;# 
    90     008C                     	;# 
    91     008D                     	;# 
    92     008E                     	;# 
    93     0091                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0094                     	;# 
    97     0098                     	;# 
    98     0099                     	;# 
    99     009C                     	;# 
   100     009D                     	;# 
   101     009E                     	;# 
   102     009F                     	;# 
   103     010C                     	;# 
   104     010D                     	;# 
   105     010E                     	;# 
   106     010F                     	;# 
   107     018C                     	;# 
   108     018D                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     0006                     	;# 
   116     0007                     	;# 
   117     0008                     	;# 
   118     0009                     	;# 
   119     000A                     	;# 
   120     000B                     	;# 
   121     000C                     	;# 
   122     000D                     	;# 
   123     000E                     	;# 
   124     000E                     	;# 
   125     000F                     	;# 
   126     0010                     	;# 
   127     0011                     	;# 
   128     0012                     	;# 
   129     0013                     	;# 
   130     0014                     	;# 
   131     0015                     	;# 
   132     0015                     	;# 
   133     0016                     	;# 
   134     0017                     	;# 
   135     0018                     	;# 
   136     0019                     	;# 
   137     001A                     	;# 
   138     001B                     	;# 
   139     001B                     	;# 
   140     001C                     	;# 
   141     001D                     	;# 
   142     001E                     	;# 
   143     001F                     	;# 
   144     0081                     	;# 
   145     0085                     	;# 
   146     0086                     	;# 
   147     0087                     	;# 
   148     0088                     	;# 
   149     0089                     	;# 
   150     008C                     	;# 
   151     008D                     	;# 
   152     008E                     	;# 
   153     0091                     	;# 
   154     0092                     	;# 
   155     0093                     	;# 
   156     0094                     	;# 
   157     0098                     	;# 
   158     0099                     	;# 
   159     009C                     	;# 
   160     009D                     	;# 
   161     009E                     	;# 
   162     009F                     	;# 
   163     010C                     	;# 
   164     010D                     	;# 
   165     010E                     	;# 
   166     010F                     	;# 
   167     018C                     	;# 
   168     018D                     	;# 
   169     0014                     _SSPCON	set	20
   170     0006                     _PORTBbits	set	6
   171     000C                     _PIR1bits	set	12
   172     0013                     _SSPBUF	set	19
   173     0094                     _SSPSTAT	set	148
   174     0086                     _TRISBbits	set	134
   175     0087                     _TRISCbits	set	135
   176     0094                     _SSPSTATbits	set	148
   177                           
   178                           	psect	cinit
   179     07FA                     start_initialization:	
   180                           ; #config settings
   181                           
   182     07FA                     __initialization:
   183                           
   184                           ; Clear objects allocated to COMMON
   185     07FA  01FA               	clrf	__pbssCOMMON& (0+127)
   186     07FB  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   187     07FC                     end_of_initialization:	
   188                           ;End of C runtime variable initialization code
   189                           
   190     07FC                     __end_of__initialization:
   191     07FC  0183               	clrf	3
   192     07FD  120A  118A  2F9F   	ljmp	_main	;jump to C main() function
   193                           
   194                           	psect	bssCOMMON
   195     007A                     __pbssCOMMON:
   196     007A                     _a:
   197     007A                     	ds	2
   198                           
   199                           	psect	cstackCOMMON
   200     0070                     __pcstackCOMMON:
   201     0070                     ?_spi_write:
   202     0070                     ?_spi_read:	
   203                           ; 1 bytes @ 0x0
   204                           
   205     0070                     ??_spi_read:	
   206                           ; 1 bytes @ 0x0
   207                           
   208     0070                     ?_main:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     0070                     spi_write@value:	
   212                           ; 1 bytes @ 0x0
   213                           
   214                           
   215                           ; 2 bytes @ 0x0
   216     0070                     	ds	2
   217     0072                     ??_spi_write:
   218     0072                     ?_write_to_25AA106A:	
   219                           ; 1 bytes @ 0x2
   220                           
   221     0072                     ?_read_from_25AA160A:	
   222                           ; 1 bytes @ 0x2
   223                           
   224     0072                     write_to_25AA106A@lsb:	
   225                           ; 1 bytes @ 0x2
   226                           
   227     0072                     read_from_25AA160A@lsb:	
   228                           ; 1 bytes @ 0x2
   229                           
   230                           
   231                           ; 1 bytes @ 0x2
   232     0072                     	ds	1
   233     0073                     ??_read_from_25AA160A:
   234     0073                     write_to_25AA106A@data:	
   235                           ; 1 bytes @ 0x3
   236                           
   237                           
   238                           ; 1 bytes @ 0x3
   239     0073                     	ds	1
   240     0074                     ??_write_to_25AA106A:
   241                           
   242                           ; 1 bytes @ 0x4
   243     0074                     	ds	1
   244     0075                     read_from_25AA160A@msb:
   245                           
   246                           ; 1 bytes @ 0x5
   247     0075                     	ds	1
   248     0076                     write_to_25AA106A@msb:
   249                           
   250                           ; 1 bytes @ 0x6
   251     0076                     	ds	1
   252     0077                     ??_main:
   253                           
   254                           ; 1 bytes @ 0x7
   255     0077                     	ds	3
   256                           
   257                           	psect	maintext
   258     079F                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 60 in file "main.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0, pclath, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : B00/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   278 ;;      Params:         0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0
   280 ;;      Temps:          3       0       0       0       0
   281 ;;      Totals:         3       0       0       0       0
   282 ;;Total ram usage:        3 bytes
   283 ;; Hardware stack levels required when called: 2
   284 ;; This function calls:
   285 ;;		_read_from_25AA160A
   286 ;;		_spi_write
   287 ;;		_write_to_25AA106A
   288 ;; This function is called by:
   289 ;;		Startup code after reset
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293     079F                     _main:	
   294                           ;psect for function _main
   295                           
   296     079F                     l657:	
   297                           ;incstack = 0
   298                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   299                           
   300                           
   301                           ;main.c: 64:   TRISCbits.TRISC3 = 0;
   302     079F  1683               	bsf	3,5	;RP0=1, select bank1
   303     07A0  1303               	bcf	3,6	;RP1=0, select bank1
   304     07A1  1187               	bcf	7,3	;volatile
   305                           
   306                           ;main.c: 65:   TRISCbits.TRISC4 = 1;
   307     07A2  1607               	bsf	7,4	;volatile
   308                           
   309                           ;main.c: 66:   TRISCbits.TRISC5 = 0;
   310     07A3  1287               	bcf	7,5	;volatile
   311                           
   312                           ;main.c: 67:   TRISBbits.TRISB0 = 0;
   313     07A4  1006               	bcf	6,0	;volatile
   314     07A5                     l659:
   315                           
   316                           ;main.c: 69: SSPCON = 0x20;
   317     07A5  3020               	movlw	32
   318     07A6  1283               	bcf	3,5	;RP0=0, select bank0
   319     07A7  1303               	bcf	3,6	;RP1=0, select bank0
   320     07A8  0094               	movwf	20	;volatile
   321     07A9                     l661:
   322                           
   323                           ;main.c: 70: SSPSTAT = 0x00;
   324     07A9  1683               	bsf	3,5	;RP0=1, select bank1
   325     07AA  1303               	bcf	3,6	;RP1=0, select bank1
   326     07AB  0194               	clrf	20	;volatile
   327     07AC                     l663:
   328                           
   329                           ;main.c: 73:             PORTBbits.RB0 = 0;
   330     07AC  1283               	bcf	3,5	;RP0=0, select bank0
   331     07AD  1303               	bcf	3,6	;RP1=0, select bank0
   332     07AE  1006               	bcf	6,0	;volatile
   333     07AF                     l665:
   334                           
   335                           ;main.c: 74:             spi_write(0x06);
   336     07AF  3006               	movlw	6
   337     07B0  00F0               	movwf	spi_write@value
   338     07B1  3000               	movlw	0
   339     07B2  00F1               	movwf	spi_write@value+1
   340     07B3  120A  118A  2725  120A  118A  	fcall	_spi_write
   341     07B8                     l667:
   342                           
   343                           ;main.c: 75:             PORTBbits.RB0 = 1;
   344     07B8  1283               	bcf	3,5	;RP0=0, select bank0
   345     07B9  1303               	bcf	3,6	;RP1=0, select bank0
   346     07BA  1406               	bsf	6,0	;volatile
   347     07BB                     l669:
   348                           
   349                           ;main.c: 77:             write_to_25AA106A(0x03,0x43,0x09);
   350     07BB  3043               	movlw	67
   351     07BC  00F2               	movwf	write_to_25AA106A@lsb
   352     07BD  3009               	movlw	9
   353     07BE  00F3               	movwf	write_to_25AA106A@data
   354     07BF  3003               	movlw	3
   355     07C0  120A  118A  2730  120A  118A  	fcall	_write_to_25AA106A
   356     07C5                     l671:
   357                           
   358                           ;main.c: 78:             _delay((unsigned long)((1000)*(20000000/4000.0)));
   359     07C5  301A               	movlw	26
   360     07C6  00F9               	movwf	??_main+2
   361     07C7  305E               	movlw	94
   362     07C8  00F8               	movwf	??_main+1
   363     07C9  306E               	movlw	110
   364     07CA  00F7               	movwf	??_main
   365     07CB                     u67:
   366     07CB  0BF7               	decfsz	??_main,f
   367     07CC  2FCB               	goto	u67
   368     07CD  0BF8               	decfsz	??_main+1,f
   369     07CE  2FCB               	goto	u67
   370     07CF  0BF9               	decfsz	??_main+2,f
   371     07D0  2FCB               	goto	u67
   372     07D1  0000               	nop
   373     07D2                     l673:
   374                           
   375                           ;main.c: 80:             PORTBbits.RB0 = 0;
   376     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   377     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   378     07D4  1006               	bcf	6,0	;volatile
   379     07D5                     l675:
   380                           
   381                           ;main.c: 81:             spi_write(0x04);
   382     07D5  3004               	movlw	4
   383     07D6  00F0               	movwf	spi_write@value
   384     07D7  3000               	movlw	0
   385     07D8  00F1               	movwf	spi_write@value+1
   386     07D9  120A  118A  2725  120A  118A  	fcall	_spi_write
   387     07DE                     l677:
   388                           
   389                           ;main.c: 82:             PORTBbits.RB0 = 1;
   390     07DE  1283               	bcf	3,5	;RP0=0, select bank0
   391     07DF  1303               	bcf	3,6	;RP1=0, select bank0
   392     07E0  1406               	bsf	6,0	;volatile
   393     07E1                     l679:
   394                           
   395                           ;main.c: 84:             _delay((unsigned long)((1000)*(20000000/4000.0)));
   396     07E1  301A               	movlw	26
   397     07E2  00F9               	movwf	??_main+2
   398     07E3  305E               	movlw	94
   399     07E4  00F8               	movwf	??_main+1
   400     07E5  306E               	movlw	110
   401     07E6  00F7               	movwf	??_main
   402     07E7                     u77:
   403     07E7  0BF7               	decfsz	??_main,f
   404     07E8  2FE7               	goto	u77
   405     07E9  0BF8               	decfsz	??_main+1,f
   406     07EA  2FE7               	goto	u77
   407     07EB  0BF9               	decfsz	??_main+2,f
   408     07EC  2FE7               	goto	u77
   409     07ED  0000               	nop
   410     07EE                     l681:
   411                           
   412                           ;main.c: 85:             read_from_25AA160A(0x03,0x43);
   413     07EE  3043               	movlw	67
   414     07EF  00F2               	movwf	read_from_25AA160A@lsb
   415     07F0  3003               	movlw	3
   416     07F1  120A  118A  2765  120A  118A  	fcall	_read_from_25AA160A
   417     07F6                     l46:	
   418                           ;main.c: 86: while(1)
   419                           
   420     07F6                     l47:	
   421                           ;main.c: 87: {;main.c: 93: }
   422                           
   423     07F6  2FF6               	goto	l46
   424     07F7  120A  118A  2800   	ljmp	start
   425     07FA                     __end_of_main:
   426                           
   427                           	psect	text1
   428     0730                     __ptext1:	
   429 ;; *************** function _write_to_25AA106A *****************
   430 ;; Defined at:
   431 ;;		line 39 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  msb             1    wreg     unsigned char 
   434 ;;  lsb             1    2[COMMON] unsigned char 
   435 ;;  data            1    3[COMMON] unsigned char 
   436 ;; Auto vars:     Size  Location     Type
   437 ;;  msb             1    6[COMMON] unsigned char 
   438 ;; Return value:  Size  Location     Type
   439 ;;                  1    wreg      void 
   440 ;; Registers used:
   441 ;;		wreg, status,2, status,0, pclath, cstack
   442 ;; Tracked objects:
   443 ;;		On entry : 0/0
   444 ;;		On exit  : 0/0
   445 ;;		Unchanged: 0/0
   446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   447 ;;      Params:         2       0       0       0       0
   448 ;;      Locals:         1       0       0       0       0
   449 ;;      Temps:          2       0       0       0       0
   450 ;;      Totals:         5       0       0       0       0
   451 ;;Total ram usage:        5 bytes
   452 ;; Hardware stack levels used: 1
   453 ;; Hardware stack levels required when called: 1
   454 ;; This function calls:
   455 ;;		_spi_write
   456 ;; This function is called by:
   457 ;;		_main
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461     0730                     _write_to_25AA106A:	
   462                           ;psect for function _write_to_25AA106A
   463                           
   464                           
   465                           ;incstack = 0
   466                           ; Regs used in _write_to_25AA106A: [wreg+status,2+status,0+pclath+cstack]
   467                           ;write_to_25AA106A@msb stored from wreg
   468     0730  00F6               	movwf	write_to_25AA106A@msb
   469     0731                     l643:
   470                           
   471                           ;main.c: 39: void write_to_25AA106A(unsigned char msb, unsigned char lsb, unsigned char 
      +                          data);main.c: 40: {;main.c: 41:          PORTBbits.RB0 = 0;
   472     0731  1283               	bcf	3,5	;RP0=0, select bank0
   473     0732  1303               	bcf	3,6	;RP1=0, select bank0
   474     0733  1006               	bcf	6,0	;volatile
   475     0734                     l645:
   476                           
   477                           ;main.c: 42:             spi_write(0x02);
   478     0734  3002               	movlw	2
   479     0735  00F0               	movwf	spi_write@value
   480     0736  3000               	movlw	0
   481     0737  00F1               	movwf	spi_write@value+1
   482     0738  120A  118A  2725  120A  118A  	fcall	_spi_write
   483                           
   484                           ;main.c: 43:             spi_write(msb);
   485     073D  0876               	movf	write_to_25AA106A@msb,w
   486     073E  00F4               	movwf	??_write_to_25AA106A
   487     073F  01F5               	clrf	??_write_to_25AA106A+1
   488     0740  0874               	movf	??_write_to_25AA106A,w
   489     0741  00F0               	movwf	spi_write@value
   490     0742  0875               	movf	??_write_to_25AA106A+1,w
   491     0743  00F1               	movwf	spi_write@value+1
   492     0744  120A  118A  2725  120A  118A  	fcall	_spi_write
   493                           
   494                           ;main.c: 44:             spi_write(lsb);
   495     0749  0872               	movf	write_to_25AA106A@lsb,w
   496     074A  00F4               	movwf	??_write_to_25AA106A
   497     074B  01F5               	clrf	??_write_to_25AA106A+1
   498     074C  0874               	movf	??_write_to_25AA106A,w
   499     074D  00F0               	movwf	spi_write@value
   500     074E  0875               	movf	??_write_to_25AA106A+1,w
   501     074F  00F1               	movwf	spi_write@value+1
   502     0750  120A  118A  2725  120A  118A  	fcall	_spi_write
   503                           
   504                           ;main.c: 45:             spi_write(data);
   505     0755  0873               	movf	write_to_25AA106A@data,w
   506     0756  00F4               	movwf	??_write_to_25AA106A
   507     0757  01F5               	clrf	??_write_to_25AA106A+1
   508     0758  0874               	movf	??_write_to_25AA106A,w
   509     0759  00F0               	movwf	spi_write@value
   510     075A  0875               	movf	??_write_to_25AA106A+1,w
   511     075B  00F1               	movwf	spi_write@value+1
   512     075C  120A  118A  2725  120A  118A  	fcall	_spi_write
   513     0761                     l647:
   514                           
   515                           ;main.c: 46:          PORTBbits.RB0 = 1;
   516     0761  1283               	bcf	3,5	;RP0=0, select bank0
   517     0762  1303               	bcf	3,6	;RP1=0, select bank0
   518     0763  1406               	bsf	6,0	;volatile
   519     0764                     l35:
   520     0764  0008               	return
   521     0765                     __end_of_write_to_25AA106A:
   522                           
   523                           	psect	text2
   524     0765                     __ptext2:	
   525 ;; *************** function _read_from_25AA160A *****************
   526 ;; Defined at:
   527 ;;		line 50 in file "main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;  msb             1    wreg     unsigned char 
   530 ;;  lsb             1    2[COMMON] unsigned char 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  msb             1    5[COMMON] unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         1       0       0       0       0
   543 ;;      Locals:         1       0       0       0       0
   544 ;;      Temps:          2       0       0       0       0
   545 ;;      Totals:         4       0       0       0       0
   546 ;;Total ram usage:        4 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; Hardware stack levels required when called: 1
   549 ;; This function calls:
   550 ;;		_spi_read
   551 ;;		_spi_write
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     0765                     _read_from_25AA160A:	
   558                           ;psect for function _read_from_25AA160A
   559                           
   560                           
   561                           ;incstack = 0
   562                           ; Regs used in _read_from_25AA160A: [wreg+status,2+status,0+pclath+cstack]
   563                           ;read_from_25AA160A@msb stored from wreg
   564     0765  00F5               	movwf	read_from_25AA160A@msb
   565     0766                     l649:
   566                           
   567                           ;main.c: 50: void read_from_25AA160A(unsigned char msb, unsigned char lsb);main.c: 51: {
      +                          ;main.c: 52:           PORTBbits.RB0 = 0;
   568     0766  1283               	bcf	3,5	;RP0=0, select bank0
   569     0767  1303               	bcf	3,6	;RP1=0, select bank0
   570     0768  1006               	bcf	6,0	;volatile
   571     0769                     l651:
   572                           
   573                           ;main.c: 53:             spi_write(0x03);
   574     0769  3003               	movlw	3
   575     076A  00F0               	movwf	spi_write@value
   576     076B  3000               	movlw	0
   577     076C  00F1               	movwf	spi_write@value+1
   578     076D  120A  118A  2725  120A  118A  	fcall	_spi_write
   579                           
   580                           ;main.c: 54:             spi_write(msb);
   581     0772  0875               	movf	read_from_25AA160A@msb,w
   582     0773  00F3               	movwf	??_read_from_25AA160A
   583     0774  01F4               	clrf	??_read_from_25AA160A+1
   584     0775  0873               	movf	??_read_from_25AA160A,w
   585     0776  00F0               	movwf	spi_write@value
   586     0777  0874               	movf	??_read_from_25AA160A+1,w
   587     0778  00F1               	movwf	spi_write@value+1
   588     0779  120A  118A  2725  120A  118A  	fcall	_spi_write
   589                           
   590                           ;main.c: 55:             spi_write(lsb);
   591     077E  0872               	movf	read_from_25AA160A@lsb,w
   592     077F  00F3               	movwf	??_read_from_25AA160A
   593     0780  01F4               	clrf	??_read_from_25AA160A+1
   594     0781  0873               	movf	??_read_from_25AA160A,w
   595     0782  00F0               	movwf	spi_write@value
   596     0783  0874               	movf	??_read_from_25AA160A+1,w
   597     0784  00F1               	movwf	spi_write@value+1
   598     0785  120A  118A  2725  120A  118A  	fcall	_spi_write
   599     078A                     l38:	
   600                           ;main.c: 56:                while( !SSPSTATbits.BF );
   601                           
   602     078A  1683               	bsf	3,5	;RP0=1, select bank1
   603     078B  1303               	bcf	3,6	;RP1=0, select bank1
   604     078C  1C14               	btfss	20,0	;volatile
   605     078D  2F8F               	goto	u51
   606     078E  2F90               	goto	u50
   607     078F                     u51:
   608     078F  2F8A               	goto	l38
   609     0790                     u50:
   610     0790                     l653:
   611                           
   612                           ;main.c: 57:             a = (spi_read());
   613     0790  120A  118A  271C  120A  118A  	fcall	_spi_read
   614     0795  00F3               	movwf	??_read_from_25AA160A
   615     0796  01F4               	clrf	??_read_from_25AA160A+1
   616     0797  0873               	movf	??_read_from_25AA160A,w
   617     0798  00FA               	movwf	_a
   618     0799  0874               	movf	??_read_from_25AA160A+1,w
   619     079A  00FB               	movwf	_a+1
   620     079B                     l655:
   621                           
   622                           ;main.c: 58:                    PORTBbits.RB0 = 1;
   623     079B  1283               	bcf	3,5	;RP0=0, select bank0
   624     079C  1303               	bcf	3,6	;RP1=0, select bank0
   625     079D  1406               	bsf	6,0	;volatile
   626     079E                     l41:
   627     079E  0008               	return
   628     079F                     __end_of_read_from_25AA160A:
   629                           
   630                           	psect	text3
   631     0725                     __ptext3:	
   632 ;; *************** function _spi_write *****************
   633 ;; Defined at:
   634 ;;		line 28 in file "main.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  value           2    0[COMMON] unsigned int 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;		None
   639 ;; Return value:  Size  Location     Type
   640 ;;                  1    wreg      void 
   641 ;; Registers used:
   642 ;;		wreg
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   648 ;;      Params:         2       0       0       0       0
   649 ;;      Locals:         0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0
   651 ;;      Totals:         2       0       0       0       0
   652 ;;Total ram usage:        2 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_write_to_25AA106A
   658 ;;		_read_from_25AA160A
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663     0725                     _spi_write:	
   664                           ;psect for function _spi_write
   665                           
   666     0725                     l641:	
   667                           ;incstack = 0
   668                           ; Regs used in _spi_write: [wreg]
   669                           
   670                           
   671                           ;main.c: 28: void spi_write (unsigned int value);main.c: 29: {;main.c: 30:   SSPBUF = va
      +                          lue;
   672     0725  0870               	movf	spi_write@value,w
   673     0726  1283               	bcf	3,5	;RP0=0, select bank0
   674     0727  1303               	bcf	3,6	;RP1=0, select bank0
   675     0728  0093               	movwf	19	;volatile
   676     0729                     l23:	
   677                           ;main.c: 31:   while(!SSPSTATbits.BF);
   678                           
   679     0729  1683               	bsf	3,5	;RP0=1, select bank1
   680     072A  1303               	bcf	3,6	;RP1=0, select bank1
   681     072B  1C14               	btfss	20,0	;volatile
   682     072C  2F2E               	goto	u41
   683     072D  2F2F               	goto	u40
   684     072E                     u41:
   685     072E  2F29               	goto	l23
   686     072F                     u40:
   687     072F                     l26:
   688     072F  0008               	return
   689     0730                     __end_of_spi_write:
   690                           
   691                           	psect	text4
   692     071C                     __ptext4:	
   693 ;; *************** function _spi_read *****************
   694 ;; Defined at:
   695 ;;		line 33 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      unsigned char 
   702 ;; Registers used:
   703 ;;		wreg, status,2
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         0       0       0       0       0
   713 ;;Total ram usage:        0 bytes
   714 ;; Hardware stack levels used: 1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_read_from_25AA160A
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722     071C                     _spi_read:	
   723                           ;psect for function _spi_read
   724                           
   725     071C                     l595:	
   726                           ;incstack = 0
   727                           ; Regs used in _spi_read: [wreg+status,2]
   728                           
   729                           
   730                           ;main.c: 35:   SSPBUF = 0x00;
   731     071C  1283               	bcf	3,5	;RP0=0, select bank0
   732     071D  1303               	bcf	3,6	;RP1=0, select bank0
   733     071E  0193               	clrf	19	;volatile
   734     071F                     l29:	
   735                           ;main.c: 36:   while(!PIR1bits.SSPIF);
   736                           
   737     071F  1D8C               	btfss	12,3	;volatile
   738     0720  2F22               	goto	u21
   739     0721  2F23               	goto	u20
   740     0722                     u21:
   741     0722  2F1F               	goto	l29
   742     0723                     u20:
   743     0723                     l597:
   744                           
   745                           ;main.c: 37:   return ( SSPBUF );
   746     0723  0813               	movf	19,w	;volatile
   747     0724                     l32:
   748     0724  0008               	return
   749     0725                     __end_of_spi_read:
   750     007E                     btemp	set	126	;btemp
   751     007E                     wtemp0	set	126
   752                           
   753                           	psect	config
   754                           
   755                           ;Config register CONFIG @ 0x2007
   756                           ;	Oscillator Selection bits
   757                           ;	FOSC = HS, HS oscillator
   758                           ;	Watchdog Timer Enable bit
   759                           ;	WDTE = OFF, WDT disabled
   760                           ;	Power-up Timer Enable bit
   761                           ;	PWRTE = OFF, PWRT disabled
   762                           ;	Brown-out Reset Enable bit
   763                           ;	BOREN = ON, BOR enabled
   764                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   765                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   766                           ;	Data EEPROM Memory Code Protection bit
   767                           ;	CPD = OFF, Data EEPROM code protection off
   768                           ;	Flash Program Memory Write Enable bits
   769                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   770                           ;	In-Circuit Debugger Mode bit
   771                           ;	DEBUG = 0x1, unprogrammed default
   772                           ;	Flash Program Memory Code Protection bit
   773                           ;	CP = OFF, Code protection off
   774     2007                     	org	8199
   775     2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_write_to_25AA106A
    _write_to_25AA106A->_spi_write
    _read_from_25AA160A->_spi_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2456
                                              7 COMMON     3     3      0
                 _read_from_25AA160A
                          _spi_write
                  _write_to_25AA106A
 ---------------------------------------------------------------------------------
 (1) _write_to_25AA106A                                    5     3      2     924
                                              2 COMMON     5     3      2
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _read_from_25AA160A                                   4     3      1     826
                                              2 COMMON     4     3      1
                           _spi_read
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _spi_write                                            2     0      2     706
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _spi_read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _read_from_25AA160A
     _spi_read
     _spi_write
   _spi_write
   _write_to_25AA106A
     _spi_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Jan 04 21:02:19 2024

                         _a 007A                 _SSPSTATbits 0094                          l23 0729  
                        l32 0724                          l41 079E                          l26 072F  
                        l35 0764                          l29 071F                          l38 078A  
                        l46 07F6                          l47 07F6                          u20 0723  
                        u21 0722                          u40 072F                          u41 072E  
                        u50 0790                          u51 078F                          u67 07CB  
                        u77 07E7       write_to_25AA106A@data 0073                         l641 0725  
                       l651 0769                         l643 0731                         l653 0790  
                       l645 0734                         l661 07A9                         l655 079B  
                       l647 0761                         l671 07C5                         l663 07AC  
                       l649 0766                         l681 07EE                         l673 07D2  
                       l665 07AF                         l657 079F                         l595 071C  
                       l675 07D5                         l667 07B8                         l659 07A5  
                       l597 0723                         l677 07DE                         l669 07BB  
                       l679 07E1                        _main 079F                        btemp 007E  
                      start 0000                       ?_main 0070                       status 0003  
                     wtemp0 007E             __initialization 07FA                __end_of_main 07FA  
                    ??_main 0077                      _SSPBUF 0013                      _SSPCON 0014  
          __end_of_spi_read 0725           _write_to_25AA106A 0730     __end_of__initialization 07FC  
        ?_write_to_25AA106A 0072              __pcstackCOMMON 0070         ??_write_to_25AA106A 0074  
 __end_of_write_to_25AA106A 0765                  __pmaintext 079F                     _SSPSTAT 0094  
                 ?_spi_read 0070                     __ptext1 0730                     __ptext2 0765  
                   __ptext3 0725                     __ptext4 071C        end_of_initialization 07FC  
         __end_of_spi_write 0730                  ??_spi_read 0070                   _PORTBbits 0006  
                 _TRISBbits 0086                   _TRISCbits 0087  __end_of_read_from_25AA160A 079F  
            spi_write@value 0070        write_to_25AA106A@lsb 0072        write_to_25AA106A@msb 0076  
       start_initialization 07FA                 __pbssCOMMON 007A                   ___latbits 0002  
                  _PIR1bits 000C                   _spi_write 0725          _read_from_25AA160A 0765  
       ?_read_from_25AA160A 0072                  ?_spi_write 0070        ??_read_from_25AA160A 0073  
     read_from_25AA160A@lsb 0072       read_from_25AA160A@msb 0075                    _spi_read 071C  
               ??_spi_write 0072  
