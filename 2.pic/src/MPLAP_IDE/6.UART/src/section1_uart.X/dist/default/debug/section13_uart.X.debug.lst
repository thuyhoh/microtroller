

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Jan 01 23:05:19 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172     0018                     _RCSTA	set	24
   173     0019                     _TXREG	set	25
   174     001A                     _RCREG	set	26
   175     000C                     _PIR1bits	set	12
   176     0099                     _SPBRG	set	153
   177     0098                     _TXSTA	set	152
   178                           
   179                           	psect	strings
   180     008D                     __pstrings:
   181     008D                     stringtab:
   182     008D                     __stringtab:
   183     008D                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186     008D                     stringdir:
   187     008D  3000               	movlw	high stringdir
   188     008E  008A               	movwf	10
   189     008F  0804               	movf	4,w
   190     0090  0A84               	incf	4,f
   191     0091  0782               	addwf	2,f
   192     0092                     __stringbase:
   193     0092  3400               	retlw	0
   194     0093                     __end_of__stringtab:
   195     0093                     STR_1:
   196     0093  3468               	retlw	104	;'h'
   197     0094  3465               	retlw	101	;'e'
   198     0095  346C               	retlw	108	;'l'
   199     0096  346C               	retlw	108	;'l'
   200     0097  346F               	retlw	111	;'o'
   201     0098  3400               	retlw	0
   202                           
   203                           	psect	cinit
   204     0011                     start_initialization:	
   205                           ; #config settings
   206                           
   207     0011                     __initialization:
   208                           
   209                           ; Clear objects allocated to COMMON
   210     0011  01F7               	clrf	__pbssCOMMON& (0+127)
   211     0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   212                           
   213                           ; Clear objects allocated to BANK0
   214     0013  1283               	bcf	3,5	;RP0=0, select bank0
   215     0014  1303               	bcf	3,6	;RP1=0, select bank0
   216     0015  01A0               	clrf	__pbssBANK0& (0+127)
   217     0016  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   218     0017  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   219     0018  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   220     0019  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   221     001A  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   222     001B  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   223     001C  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   224     001D  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   225     001E  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   226     001F                     end_of_initialization:	
   227                           ;End of C runtime variable initialization code
   228                           
   229     001F                     __end_of__initialization:
   230     001F  0183               	clrf	3
   231     0020  120A  118A  2877   	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bssCOMMON
   234     0077                     __pbssCOMMON:
   235     0077                     _k:
   236     0077                     	ds	2
   237                           
   238                           	psect	bssBANK0
   239     0020                     __pbssBANK0:
   240     0020                     _y:
   241     0020                     	ds	10
   242                           
   243                           	psect	cstackCOMMON
   244     0070                     __pcstackCOMMON:
   245     0070                     ?_receive:
   246     0070                     ??_receive:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_tx:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_string_tx:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258                           
   259                           ; 1 bytes @ 0x0
   260     0070                     	ds	3
   261     0073                     ??_tx:
   262     0073                     tx@data:	
   263                           ; 1 bytes @ 0x3
   264                           
   265                           
   266                           ; 1 bytes @ 0x3
   267     0073                     	ds	1
   268     0074                     ??_string_tx:
   269                           
   270                           ; 1 bytes @ 0x4
   271     0074                     	ds	3
   272     0077                     ??_main:
   273                           
   274                           	psect	cstackBANK0
   275     002A                     __pcstackBANK0:	
   276                           ; 1 bytes @ 0x7
   277                           
   278     002A                     string_tx@str:
   279                           
   280                           ; 1 bytes @ 0x0
   281     002A                     	ds	1
   282     002B                     string_tx@i:
   283                           
   284                           ; 2 bytes @ 0x1
   285     002B                     	ds	2
   286                           
   287                           	psect	maintext
   288     0077                     __pmaintext:	
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 56 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : B00/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   308 ;;      Params:         0       0       0       0       0
   309 ;;      Locals:         0       0       0       0       0
   310 ;;      Temps:          0       0       0       0       0
   311 ;;      Totals:         0       0       0       0       0
   312 ;;Total ram usage:        0 bytes
   313 ;; Hardware stack levels required when called: 3
   314 ;; This function calls:
   315 ;;		_string_tx
   316 ;; This function is called by:
   317 ;;		Startup code after reset
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321     0077                     _main:	
   322                           ;psect for function _main
   323                           
   324     0077                     l700:	
   325                           ;incstack = 0
   326                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   327                           
   328                           
   329                           ;main.c: 57: TXSTA = 0x24;
   330     0077  3024               	movlw	36
   331     0078  1683               	bsf	3,5	;RP0=1, select bank1
   332     0079  1303               	bcf	3,6	;RP1=0, select bank1
   333     007A  0098               	movwf	24	;volatile
   334                           
   335                           ;main.c: 58: RCSTA = 0x90;
   336     007B  3090               	movlw	144
   337     007C  1283               	bcf	3,5	;RP0=0, select bank0
   338     007D  1303               	bcf	3,6	;RP1=0, select bank0
   339     007E  0098               	movwf	24	;volatile
   340                           
   341                           ;main.c: 59: SPBRG = 129;
   342     007F  3081               	movlw	129
   343     0080  1683               	bsf	3,5	;RP0=1, select bank1
   344     0081  1303               	bcf	3,6	;RP1=0, select bank1
   345     0082  0099               	movwf	25	;volatile
   346     0083                     l702:
   347                           
   348                           ;main.c: 61: string_tx("hello");
   349     0083  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   350     0084  120A  118A  2023  120A  118A  	fcall	_string_tx
   351     0089  2883               	goto	l702
   352     008A  120A  118A  280E   	ljmp	start
   353     008D                     __end_of_main:
   354                           
   355                           	psect	text1
   356     0023                     __ptext1:	
   357 ;; *************** function _string_tx *****************
   358 ;; Defined at:
   359 ;;		line 47 in file "main.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;  str             1    wreg     PTR const unsigned char 
   362 ;;		 -> STR_1(6), 
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  str             1    0[BANK0 ] PTR const unsigned char 
   365 ;;		 -> STR_1(6), 
   366 ;;  i               2    1[BANK0 ] int 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   376 ;;      Params:         0       0       0       0       0
   377 ;;      Locals:         0       3       0       0       0
   378 ;;      Temps:          3       0       0       0       0
   379 ;;      Totals:         3       3       0       0       0
   380 ;;Total ram usage:        6 bytes
   381 ;; Hardware stack levels used: 1
   382 ;; Hardware stack levels required when called: 2
   383 ;; This function calls:
   384 ;;		_tx
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390     0023                     _string_tx:	
   391                           ;psect for function _string_tx
   392                           
   393                           
   394                           ;incstack = 0
   395                           ; Regs used in _string_tx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   396                           ;string_tx@str stored from wreg
   397     0023  1283               	bcf	3,5	;RP0=0, select bank0
   398     0024  1303               	bcf	3,6	;RP1=0, select bank0
   399     0025  00AA               	movwf	string_tx@str
   400     0026                     l690:
   401                           
   402                           ;main.c: 48: int i = 0;
   403     0026  01AB               	clrf	string_tx@i
   404     0027  01AC               	clrf	string_tx@i+1
   405                           
   406                           ;main.c: 49: while(str[i] != '\0'){
   407     0028  284B               	goto	l698
   408     0029                     l692:
   409                           
   410                           ;main.c: 50: tx(str[i]);
   411     0029  082B               	movf	string_tx@i,w
   412     002A  072A               	addwf	string_tx@str,w
   413     002B  0084               	movwf	4
   414     002C  120A  118A  208D  120A  118A  	fcall	stringdir
   415     0031  120A  118A  2099  120A  118A  	fcall	_tx
   416     0036                     l694:
   417                           
   418                           ;main.c: 51: i++;
   419     0036  3001               	movlw	1
   420     0037  1283               	bcf	3,5	;RP0=0, select bank0
   421     0038  1303               	bcf	3,6	;RP1=0, select bank0
   422     0039  07AB               	addwf	string_tx@i,f
   423     003A  1803               	skipnc
   424     003B  0AAC               	incf	string_tx@i+1,f
   425     003C  3000               	movlw	0
   426     003D  07AC               	addwf	string_tx@i+1,f
   427     003E                     l696:
   428                           
   429                           ;main.c: 52: _delay((unsigned long)((200)*(20000000/4000.0)));
   430     003E  3006               	movlw	6
   431     003F  00F6               	movwf	??_string_tx+2
   432     0040  3013               	movlw	19
   433     0041  00F5               	movwf	??_string_tx+1
   434     0042  30AD               	movlw	173
   435     0043  00F4               	movwf	??_string_tx
   436     0044                     u87:
   437     0044  0BF4               	decfsz	??_string_tx,f
   438     0045  2844               	goto	u87
   439     0046  0BF5               	decfsz	??_string_tx+1,f
   440     0047  2844               	goto	u87
   441     0048  0BF6               	decfsz	??_string_tx+2,f
   442     0049  2844               	goto	u87
   443     004A  284B               	nop2
   444     004B                     l698:
   445     004B  1283               	bcf	3,5	;RP0=0, select bank0
   446     004C  1303               	bcf	3,6	;RP1=0, select bank0
   447     004D  082B               	movf	string_tx@i,w
   448     004E  072A               	addwf	string_tx@str,w
   449     004F  0084               	movwf	4
   450     0050  120A  118A  208D  120A  118A  	fcall	stringdir
   451     0055  3A00               	xorlw	0
   452     0056  1D03               	skipz
   453     0057  2859               	goto	u71
   454     0058  285A               	goto	u70
   455     0059                     u71:
   456     0059  2829               	goto	l692
   457     005A                     u70:
   458     005A                     l34:
   459     005A  0008               	return
   460     005B                     __end_of_string_tx:
   461                           
   462                           	psect	text2
   463     0099                     __ptext2:	
   464 ;; *************** function _tx *****************
   465 ;; Defined at:
   466 ;;		line 40 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  data            1    wreg     unsigned char 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  data            1    3[COMMON] unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   480 ;;      Params:         0       0       0       0       0
   481 ;;      Locals:         1       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0
   483 ;;      Totals:         1       0       0       0       0
   484 ;;Total ram usage:        1 bytes
   485 ;; Hardware stack levels used: 1
   486 ;; Hardware stack levels required when called: 1
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_string_tx
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494     0099                     _tx:	
   495                           ;psect for function _tx
   496                           
   497                           
   498                           ;incstack = 0
   499                           ; Regs used in _tx: [wreg]
   500                           ;tx@data stored from wreg
   501     0099  00F3               	movwf	tx@data
   502     009A                     l684:
   503                           
   504                           ;main.c: 41: if(PIR1bits.TXIF == 1){
   505     009A  1283               	bcf	3,5	;RP0=0, select bank0
   506     009B  1303               	bcf	3,6	;RP1=0, select bank0
   507     009C  1E0C               	btfss	12,4	;volatile
   508     009D  289F               	goto	u61
   509     009E  28A0               	goto	u60
   510     009F                     u61:
   511     009F  28A3               	goto	l28
   512     00A0                     u60:
   513     00A0                     l686:
   514                           
   515                           ;main.c: 42: TXREG = data;
   516     00A0  0873               	movf	tx@data,w
   517     00A1  0099               	movwf	25	;volatile
   518     00A2                     l688:
   519                           
   520                           ;main.c: 43: PIR1bits.TXIF = 0;
   521     00A2  120C               	bcf	12,4	;volatile
   522     00A3                     l28:
   523     00A3  0008               	return
   524     00A4                     __end_of_tx:
   525                           
   526                           	psect	text3
   527     005B                     __ptext3:	
   528 ;; *************** function _receive *****************
   529 ;; Defined at:
   530 ;;		line 31 in file "main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          3       0       0       0       0
   547 ;;      Totals:         3       0       0       0       0
   548 ;;Total ram usage:        3 bytes
   549 ;; Hardware stack levels used: 1
   550 ;; This function calls:
   551 ;;		Nothing
   552 ;; This function is called by:
   553 ;;		Interrupt level 1
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     005B                     _receive:	
   558                           ;psect for function _receive
   559                           
   560     005B                     i1l672:
   561                           
   562                           ;main.c: 32: if(PIR1bits.RCIF == 1){
   563     005B  1283               	bcf	3,5	;RP0=0, select bank0
   564     005C  1303               	bcf	3,6	;RP1=0, select bank0
   565     005D  1E8C               	btfss	12,5	;volatile
   566     005E  2860               	goto	u5_21
   567     005F  2861               	goto	u5_20
   568     0060                     u5_21:
   569     0060  286E               	goto	i1l24
   570     0061                     u5_20:
   571     0061                     i1l674:
   572                           
   573                           ;main.c: 33: y[k] = RCREG;
   574     0061  0877               	movf	_k,w
   575     0062  3E20               	addlw	(low (_y| 0))& (0+255)
   576     0063  0084               	movwf	4
   577     0064  081A               	movf	26,w	;volatile
   578     0065  1383               	bcf	3,7	;select IRP bank0
   579     0066  0080               	movwf	0
   580     0067                     i1l676:
   581                           
   582                           ;main.c: 34: k++;
   583     0067  3001               	movlw	1
   584     0068  07F7               	addwf	_k,f
   585     0069  1803               	skipnc
   586     006A  0AF8               	incf	_k+1,f
   587     006B  3000               	movlw	0
   588     006C  07F8               	addwf	_k+1,f
   589     006D                     i1l678:
   590                           
   591                           ;main.c: 35: PIR1bits.RCIF = 0;
   592     006D  128C               	bcf	12,5	;volatile
   593     006E                     i1l24:
   594     006E  0872               	movf	??_receive+2,w
   595     006F  008A               	movwf	10
   596     0070  0871               	movf	??_receive+1,w
   597     0071  0084               	movwf	4
   598     0072  0E70               	swapf	??_receive,w
   599     0073  0083               	movwf	3
   600     0074  0EFE               	swapf	btemp,f
   601     0075  0E7E               	swapf	btemp,w
   602     0076  0009               	retfie
   603     0077                     __end_of_receive:
   604     007E                     btemp	set	126	;btemp
   605     007E                     wtemp0	set	126
   606                           
   607                           	psect	intentry
   608     0004                     __pintentry:	
   609                           ;incstack = 0
   610                           ; Regs used in _receive: [wreg-fsr0h+status,2+status,0]
   611                           
   612     0004                     interrupt_function:
   613     007E                     saved_w	set	btemp
   614     0004  00FE               	movwf	btemp
   615     0005  0E03               	swapf	3,w
   616     0006  00F0               	movwf	??_receive
   617     0007  0804               	movf	4,w
   618     0008  00F1               	movwf	??_receive+1
   619     0009  080A               	movf	10,w
   620     000A  00F2               	movwf	??_receive+2
   621     000B  120A  118A  285B   	ljmp	_receive
   622                           
   623                           	psect	config
   624                           
   625                           ;Config register CONFIG @ 0x2007
   626                           ;	Oscillator Selection bits
   627                           ;	FOSC = HS, HS oscillator
   628                           ;	Watchdog Timer Enable bit
   629                           ;	WDTE = OFF, WDT disabled
   630                           ;	Power-up Timer Enable bit
   631                           ;	PWRTE = OFF, PWRT disabled
   632                           ;	Brown-out Reset Enable bit
   633                           ;	BOREN = ON, BOR enabled
   634                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   635                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   636                           ;	Data EEPROM Memory Code Protection bit
   637                           ;	CPD = OFF, Data EEPROM code protection off
   638                           ;	Flash Program Memory Write Enable bits
   639                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   640                           ;	In-Circuit Debugger Mode bit
   641                           ;	DEBUG = 0x1, unprogrammed default
   642                           ;	Flash Program Memory Code Protection bit
   643                           ;	CP = OFF, Code protection off
   644     2007                     	org	8199
   645     2007  3F7A               	dw	16250

Data Sizes:
    Strings     6
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      3      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    string_tx@str	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_string_tx
    _string_tx->_tx

Critical Paths under _receive in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_string_tx

Critical Paths under _receive in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receive in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receive in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receive in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     188
                          _string_tx
 ---------------------------------------------------------------------------------
 (1) _string_tx                                            6     6      0     188
                                              4 COMMON     3     3      0
                                              0 BANK0      3     3      0
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _receive                                              3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _string_tx
     _tx

 _receive (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      16       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       D       5       16.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      16      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Jan 01 23:05:19 2024

                      _k 0077                        _y 0020                        pc 0002  
                     l34 005A                       l28 00A3                       u60 00A0  
                     u61 009F                       u70 005A                       u71 0059  
                     u87 0044                       _tx 0099                       fsr 0004  
                    l700 0077                      l702 0083                      ?_tx 0070  
                    l690 0026                      l684 009A                      l692 0029  
                    l686 00A0                      l694 0036                      l688 00A2  
                    l696 003E                      l698 004B                      fsr0 0004  
                    indf 0000                     ??_tx 0073                     STR_1 0093  
                   i1l24 006E                     u5_20 0061                     u5_21 0060  
                   _main 0077                     btemp 007E                     start 000E  
                  ?_main 0070                    i1l672 005B                    i1l674 0061  
                  i1l676 0067                    i1l678 006D                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _TXREG 0019  
                  _TXSTA 0098          __end_of_receive 0077                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0011  
           __end_of_main 008D                   ??_main 0077                ??_receive 0070  
                 tx@data 0073                   saved_w 007E  __end_of__initialization 001F  
         __pcstackCOMMON 0070               __end_of_tx 00A4               __pbssBANK0 0020  
             __pmaintext 0077               __pintentry 0004               __stringtab 008D  
                __ptext1 0023                  __ptext2 0099                  __ptext3 005B  
                _receive 005B             string_tx@str 002A     end_of_initialization 001F  
      __end_of_string_tx 005B      start_initialization 0011              __pbssCOMMON 0077  
              ___latbits 0002            __pcstackBANK0 002A                __pstrings 008D  
               ?_receive 0070        interrupt_function 0004                 _PIR1bits 000C  
            __stringbase 0092                _string_tx 0023       __end_of__stringtab 0093  
             ?_string_tx 0070               string_tx@i 002B                 intlevel1 0000  
              stringcode 008D                 stringdir 008D                 stringtab 008D  
            ??_string_tx 0074  
